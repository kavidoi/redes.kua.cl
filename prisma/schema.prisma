// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  workspaces       WorkspaceMember[]
  createdFlows     Flow[]
  conversations    Conversation[]
  messages         Message[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members         WorkspaceMember[]
  instagramAccounts InstagramAccount[]
  flows           Flow[]
  conversations   Conversation[]
  contacts        Contact[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model InstagramAccount {
  id          String   @id @default(cuid())
  workspaceId String
  username    String
  instagramId String   @unique
  accessToken String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@map("instagram_accounts")
}

model Contact {
  id          String   @id @default(cuid())
  workspaceId String
  instagramId String?
  username    String?
  fullName    String?
  email       String?
  phone       String?
  tags        String
  customFields Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@map("contacts")
}

model Flow {
  id          String   @id @default(cuid())
  workspaceId String
  createdById String
  name        String
  description String?
  isActive    Boolean  @default(false)
  trigger     FlowTrigger
  nodes       Json     // Flow builder nodes and connections
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy User      @relation(fields: [createdById], references: [id])

  @@map("flows")
}

model Conversation {
  id                String   @id @default(cuid())
  workspaceId       String
  instagramAccountId String?
  contactId         String?
  assignedUserId    String?
  status            ConversationStatus @default(OPEN)
  lastMessageAt     DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  workspace        Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instagramAccount InstagramAccount? @relation(fields: [instagramAccountId], references: [id])
  contact          Contact?          @relation(fields: [contactId], references: [id])
  assignedUser     User?             @relation(fields: [assignedUserId], references: [id])
  messages         Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String?
  content        String
  messageType    MessageType @default(TEXT)
  direction      MessageDirection
  instagramId    String?  // Instagram message ID
  metadata       Json?    // Additional message data
  sentAt         DateTime @default(now())
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User?        @relation(fields: [senderId], references: [id])

  @@map("messages")
}

enum Role {
  USER
  ADMIN
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

enum FlowTrigger {
  KEYWORD
  WELCOME_MESSAGE
  STORY_MENTION
  COMMENT_REPLY
  MANUAL
}

enum ConversationStatus {
  OPEN
  PENDING
  RESOLVED
  ARCHIVED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  STORY_MENTION
  STORY_REPLY
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}
